{"version":3,"sources":["buttons/actions.js","buttons/components/DigitButton.js","buttons/components/OperationButton.js","buttons/components/ButtonGroup.js","buttons/reducer.js","App.js","index.js"],"names":["ACTIONS","DigitButton","dispatch","digit","onClick","type","payload","OperationButton","operation","ButtonGroup","className","evaluate","currentOperand","previousOperand","prev","parseFloat","current","isNaN","computation","toString","reducer","state","overwrite","includes","length","slice","INTEGER_FORMATTER","Intl","NumberFormat","maximumFractionDigits","formatOperand","operand","split","integer","decimal","format","App","useReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c2d4455f.chunk.js","sourcesContent":["export const ACTIONS = {\r\n  ADD_DIGIT: \"add-digit\",\r\n  CHOOSE_OPERATION: \"choose-operation\",\r\n  CLEAR: \"clear\",\r\n  DELETE_DIGIT: \"delete-digit\",\r\n  EVALUATE: \"evaluate\",\r\n};\r\n","import { ACTIONS } from \"./../actions\";\r\n\r\nconst DigitButton = ({ dispatch, digit }) => {\r\n  return (\r\n    <button\r\n      onClick={() => dispatch({ type: ACTIONS.ADD_DIGIT, payload: { digit } })}\r\n    >\r\n      {digit}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default DigitButton;\r\n","import { ACTIONS } from \"./../actions\";\r\n\r\nconst OperationButton = ({ dispatch, operation }) => {\r\n  return (\r\n    <button\r\n      onClick={() => dispatch({ type: ACTIONS.CHOOSE_OPERATION, payload: { operation } })}\r\n    >\r\n      {operation}\r\n    </button>\r\n  );\r\n};\r\nexport default OperationButton;\r\n","import { ACTIONS } from \"../actions\";\r\nimport DigitButton from \"./DigitButton\";\r\nimport OperationButton from \"./OperationButton\";\r\n\r\nconst spanOneBtns = [\r\n  \"DEL\",\r\n  \"/\",\r\n  \"1\",\r\n  \"2\",\r\n  \"3\",\r\n  \"*\",\r\n  \"4\",\r\n  \"5\",\r\n  \"6\",\r\n  \"+\",\r\n  \"7\",\r\n  \"8\",\r\n  \"9\",\r\n  \"-\",\r\n  \".\",\r\n  \"0\",\r\n];\r\n\r\nconst ButtonGroup = ({ dispatch }) => (\r\n  <>\r\n    <button\r\n      className=\"span-two\"\r\n      onClick={() => dispatch({ type: ACTIONS.CLEAR })}\r\n    >\r\n      AC\r\n    </button>\r\n    <button onClick={()=>dispatch({type: ACTIONS.DELETE_DIGIT})}>DEL</button>\r\n    <OperationButton operation=\"/\" dispatch={dispatch} />\r\n    <DigitButton digit=\"1\" dispatch={dispatch} />\r\n    <DigitButton digit=\"2\" dispatch={dispatch} />\r\n    <DigitButton digit=\"3\" dispatch={dispatch} />\r\n    <OperationButton operation=\"*\" dispatch={dispatch} />\r\n    <DigitButton digit=\"4\" dispatch={dispatch} />\r\n    <DigitButton digit=\"5\" dispatch={dispatch} />\r\n    <DigitButton digit=\"6\" dispatch={dispatch} />\r\n    <OperationButton operation=\"+\" dispatch={dispatch} />\r\n    <DigitButton digit=\"7\" dispatch={dispatch} />\r\n    <DigitButton digit=\"8\" dispatch={dispatch} />\r\n    <DigitButton digit=\"9\" dispatch={dispatch} />\r\n    <OperationButton operation=\"-\" dispatch={dispatch} />\r\n    <DigitButton digit=\".\" dispatch={dispatch} />\r\n    <DigitButton digit=\"0\" dispatch={dispatch} />\r\n    <button\r\n      className=\"span-two\"\r\n      onClick={() => dispatch({ type: ACTIONS.EVALUATE })}\r\n    >\r\n      =\r\n    </button>\r\n  </>\r\n);\r\n\r\nexport default ButtonGroup;\r\n","import { ACTIONS } from \"./actions\";\r\n\r\nconst reducer = (state, { type, payload }) => {\r\n  switch (type) {\r\n    case ACTIONS.ADD_DIGIT:\r\n      if (state.overwrite) {\r\n        return {\r\n          ...state,\r\n          currentOperand: payload.digit,\r\n          overwrite: false,\r\n        };\r\n      }\r\n      if (payload.digit === \"0\" && state.currentOperand === \"0\") {\r\n        return state;\r\n      }\r\n      if (payload.digit === \".\" && state.currentOperand.includes(\".\")) {\r\n        return state;\r\n      }\r\n      return {\r\n        ...state,\r\n        currentOperand: `${state.currentOperand || \"\"}${payload.digit}`,\r\n      };\r\n\r\n    case ACTIONS.CHOOSE_OPERATION:\r\n      if (state.currentOperand == null && state.previousOperand == null) {\r\n        return state;\r\n      }\r\n      if (state.previousOperand == null) {\r\n        return {\r\n          ...state,\r\n          operation: payload.operation,\r\n          previousOperand: state.currentOperand,\r\n          currentOperand: null,\r\n        };\r\n      }\r\n      if (state.currentOperand == null) {\r\n        return { ...state, operation: payload.operation };\r\n      }\r\n      return {\r\n        ...state,\r\n        previousOperand: evaluate(state),\r\n        operation: payload.operation,\r\n        currentOperand: null,\r\n      };\r\n\r\n    case ACTIONS.CLEAR:\r\n      return {};\r\n    case ACTIONS.EVALUATE:\r\n      if (\r\n        state.operation == null ||\r\n        state.currentOperand == null ||\r\n        state.previousOperand == null\r\n      ) {\r\n        return state;\r\n      }\r\n      return {\r\n        ...state,\r\n        overwrite: true,\r\n        previousOperand: null,\r\n        operation: null,\r\n        currentOperand: evaluate(state),\r\n      };\r\n    case ACTIONS.DELETE_DIGIT:\r\n      if (state.overwrite) {\r\n        return {\r\n          ...state,\r\n          currentOperand: null,\r\n          overwrite: false,\r\n        };\r\n      }\r\n      if (state.currentOperand == null) {\r\n        return state;\r\n      }\r\n      if (state.currentOperand.length === 1) {\r\n        return {\r\n          ...state,\r\n          currentOperand: null,\r\n        };\r\n      }\r\n      return {\r\n        ...state,\r\n        currentOperand: state.currentOperand.slice(0, -1),\r\n      };\r\n    default:\r\n      return;\r\n  }\r\n};\r\n\r\nconst evaluate = ({ currentOperand, previousOperand, operation }) => {\r\n  const prev = parseFloat(previousOperand);\r\n  const current = parseFloat(currentOperand);\r\n  if (isNaN(prev) || isNaN(current)) return \"\";\r\n  let computation = \"\";\r\n  switch (operation) {\r\n    case \"+\":\r\n      computation = prev + current;\r\n      break;\r\n    case \"-\":\r\n      computation = prev - current;\r\n      break;\r\n    case \"*\":\r\n      computation = prev * current;\r\n      break;\r\n    case \"/\":\r\n      computation = prev / current;\r\n      break;\r\n\r\n    default:\r\n      return;\r\n  }\r\n  return computation.toString();\r\n};\r\n\r\n\r\nexport default reducer;\r\n","import { useReducer } from \"react\";\nimport \"./styles.css\";\nimport ButtonGroup from \"./buttons/components/ButtonGroup\";\nimport reducer from \"./buttons/reducer\";\n\n\n\nconst INTEGER_FORMATTER = new Intl.NumberFormat(\"en-us\", {\n  maximumFractionDigits: 0,\n});\n\nconst formatOperand = (operand) => {\n  if (operand == null) return;\n  const [integer, decimal] = operand.split(\".\");\n  if (decimal == null) return INTEGER_FORMATTER.format(integer);\n  return `${INTEGER_FORMATTER.format(integer)}.${decimal}`\n};\n\n\nconst App = () => {\n  const [{ currentOperand, previousOperand, operation }, dispatch] = useReducer(\n    reducer,\n    {}\n  );\n\n  return (\n    <div className=\"calculator-grid\">\n      <div className=\"output\">\n        <div className=\"previous-operand\">\n          {formatOperand(currentOperand)} {operation}\n        </div>\n        <div className=\"current-operand\">{formatOperand(previousOperand)}</div>\n      </div>\n      <ButtonGroup dispatch={dispatch} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}